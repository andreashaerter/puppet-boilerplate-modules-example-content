
  I. About
  
    This file contains a protocol about how the example module (-> "filezilla"
    directory) and the corresponding documentation (-> "doc" directory) were
    created. Therefore, this text may be useful to learn how to use the
    puppet-boilerplate-modules [1] project.

    [1] <https://github.com/syn-systems/puppet-boilerplate-modules>



  II. Creation transcript

    1. Cloned the puppet-boilerplate-modules repository:
       $ git clone git://github.com/syn-systems/puppet-boilerplate-modules.git


    2. Called the wizard to create the module skeleton for a new module:
       $ ./puppet-boilerplate-modules/newmodule.sh


    3. Answered the questions:

       a) Boilerplate to use:
            application-003 (corresponding number should be "2").
            FileZilla packages can be found in nearly every Linux repository and
            the software normally does not need further configuration. This is
            why the "application-001" boilerplate would also be a good
            boilerplate to use (is it clean and simple). However, I chose
            "application-003" because it provides:
            - Many inline comments. Perfect to understand the module structure
              and helpful for Puppet newbies.
            - Parameters for extensive customization without the need for touch
              the module (-> "package", "autoload_class")
            - Included debug functionality (-> "debug" parameter).
            Cool features I want to demonstrate.

       b) Name for the new module:
            filezilla

       c) Target directory:
            Just pressed ENTER to select the home directory.

       d) Full Name:
            SYN Systems

       e) Email address:
            puppet@dev.syn-systems.com

       f) The new module wizard now created the module. It also gave me a hint:
           "Start to edit the following files (-> positions marked with
            'FIXME/TODO') for customization:
            - /home/user/filezilla/manifests/config.pp
            - /home/user/filezilla/manifests/init.pp
            - /home/user/filezilla/manifests/params.pp
            - /home/user/filezilla/manifests/repo.pp
            - /home/user/filezilla/README"
          It says so because all available boilerplates mark the lines you must
          edit/check in every case after you generated a module with FIXME/TODO.
          The wizard scans for these lines and informs you about the files you
          may want to start editing.

       g) Start repository wizard?
           No. I exited the program. This is only useful if I would want to
           create a new Git repository on GitHub or Bitbucket for the module.


    4. The new FileZilla module was now located in "~/filezilla". I started to
       edit the created files to get a working module. Most work was already
       done by the "new module wizard" (newmodule.sh). I just followed the
       wizard's advice where to start:
       - "~/filezilla/manifests/config.pp":
         I don't need configuration actions for FileZilla. Therefore this file
         is not needed and I deleted it. Everything you need to know is
         explained in a comment [1] at the top of the file.
       - "~/filezilla/manifests/repo.pp":
         I don't need to setup a repository for FileZilla because there should
         be packages in all default repositories. Therefore this file is not
         needed and I deleted it. Everything you need to know is
         explained in a comment [2] at the top of the file.
       - "~/filezilla/manifests/init.pp":
         Removed the:
         - FIXME/TODO line in the RDoc block at the top of the file [3]
         - calls of the deleted classes (repo.pp [4], config.pp [5])
         - all relationships [6] because they are not needed after the removal
           of repo.pp and config.pp.
       - "~/filezilla/manifests/params.pp":
         Replaced FIXME/TODO with the package names [7].
       - "~/filezilla/README":
         Added some general notes and links.
       That's all, the module is finished. Really simple and small edits. It
       took ~ten minutes to create the whole, well documented module. 95% of the
       time was spent to write the module's README. Optional but recommended:
       I ran lint.sh [8] (a wrapper around puppet-lint [9]) to make sure
       everything follows the official Puppet Labs style guide [10].

       [1]  <http://j.mp/UtQrqW>
       [2]  <http://j.mp/UdCP0G>
       [3]  <http://j.mp/Vg2zhw>
       [4]  <http://j.mp/SvCYMZ>
       [5]  <http://j.mp/Y9lSLf>
       [6]  <http://j.mp/UtQSl1>
       [7]  <http://j.mp/11ihmb3>
       [8]  <https://github.com/syn-systems/puppet-tools/blob/master/lint.sh>
       [9]  <https://github.com/rodjek/puppet-lint>
       [10] <http://docs.puppetlabs.com/guides/style_guide.html>


    5. Rendered the HTML documentation with the following command:
         $ puppet doc --mode rdoc --modulepath ~ --outputdir ~/doc
       Have a look in the "doc" directory to view its output. Just open the
       "index.html" with your browser.


    6. Time for a test. I created everything in a fresh VM, so I first made sure
       Puppet is able to run:
         $ su -
         $ mkdir /etc/puppet/modules
         $ touch /etc/puppet/site.pp
         $ cd /etc/puppet/modules
         $ puppet module install puppetlabs-stdlib
       I copied the module into the modulepath [1] and tested it with the
       following commands:
         $ su -
         $ mkdir /etc/puppet/modules/filezilla
         $ cp -R -v /home/user/filezilla/. /etc/puppet/modules/filezilla/.
         $ puppet apply -e "class { 'filezilla': }"
         $ puppet apply -e "class { 'filezilla': ensure => 'absent'}"
       FileZilla was installed and removed as expected. :-)

       [1] <http://j.mp/JLMlb0>

